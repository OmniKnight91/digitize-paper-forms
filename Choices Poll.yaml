modules:
- {name: Module1, code: "import anvil.server\nimport tables\nfrom tables import app_tables\n\
    # This is a module.\n# You can define variables and functions here, and use them\
    \ from any form. For example:\n#\n#    import Module1\n#\n#    Module1.say_hello()\n\
    #\n\ndef get_click():\n  return anvil.server.call_s('get_click')\n\ndef set_click():\n\
    \  anvil.server.call_s('set_click')\n\ndef get_count():\n  return anvil.server.call_s('get_counter')\n\
    \ndef increase_count():\n  anvil.server.call_s('update_count') \n\ndef results():\n\
    \  return anvil.server.call_s('get_results')\n\ndef update_data(c, btn):\n  row\
    \ = list(app_tables.questions.search())\n  if btn == 0:\n    row[c]['Choice1_Value']\
    \ += 1\n  elif btn == 1:\n    row[c]['Choice2_Value'] += 1\n  \n  '''\n  if c\
    \ == 0 and btn == 0:\n    arctic_row = app_tables.questions.get(Choice1=\"Arctic\"\
    )\n    arctic_row['Choice1_Value'] += 1\n    print(\"Arctic updated\")\n  elif\
    \ c == 0 and btn == 1:\n    forest_row = app_tables.questions.get(Choice2=\"Forest\"\
    )\n    forest_row['Choice2_Value'] += 1\n    print(\"Forest updated\")\n  elif\
    \ c == 1 and btn == 0:\n    celestial_row = app_tables.questions.get(Choice1=\"\
    Celestial\")\n    celestial_row['Choice1_Value'] += 1\n    print(\"Celestial updated\"\
    )\n  elif c == 1 and btn == 1:\n    chill_row = app_tables.questions.get(Choice2=\"\
    Chill\")\n    chill_row['Choice2_Value'] += 1\n    print(\"Chill updated\")\n\
    \  elif c == 2 and btn == 0:\n    blue_row = app_tables.questions.get(Choice1=\"\
    Blue\")\n    blue_row['Choice1_Value'] += 1\n    print(\"Blue updated\")\n  elif\
    \ c == 2 and btn == 1:\n    aqua_row = app_tables.questions.get(Choice2=\"Aqua\"\
    )\n    aqua_row['Choice2_Value'] += 1\n    print(\"Aqua updated\")\n  '''\n  \n\
    def say_hello():\n  print \"Hello, world\"\n  \n\n  \n  "}
exported_table_schema:
- id: 2640
  columns:
    JZWQwtzjAXk=:
      name: question
      type: string
      admin_ui: {order: 0, width: 200}
    hIxutc0_nZk=:
      name: Choice2_Value
      type: number
      admin_ui: {order: 4, width: 200}
    poktj+4ZoFo=:
      name: Choice1_Value
      type: number
      admin_ui: {order: 3, width: 200}
    sRNRx6ittUQ=:
      name: Choice1
      type: string
      admin_ui: {order: 1, width: 200}
    wzbnvBxVF_k=:
      name: Choice2
      type: string
      admin_ui: {order: 2, width: 200}
    yGUwj54gTFM=:
      name: place
      type: number
      admin_ui: {order: 5, width: 200}
  name: questions
  server: full
  client: full
  python_name: questions
- id: 2680
  columns:
    LUFy3GDsAvM=:
      name: arcticW
      type: bool
      admin_ui: {order: 3, width: 200}
    QxtetTj74Cs=:
      name: selectionMade
      type: bool
      admin_ui: {order: 2, width: 200}
    TgDMf64SB5Y=:
      name: next_clicked
      type: bool
      admin_ui: {order: 1, width: 200}
    se4a91udSBs=:
      name: counter
      type: number
      admin_ui: {order: 0, width: 200}
  name: count
  server: full
  client: full
  python_name: count
services:
- source: /runtime/services/tables.yml
  client_config: {}
  server_config: {}
forms:
- code: "from anvil import *\nimport anvil.server\nimport tables\nfrom tables import\
    \ app_tables\nimport plotly.plotly as py\nfrom plotly import graph_objs as go\n\
    import Module1\n\nclass Form1(Form1Template):\n  \n  def __init__(self, **properties):\n\
    \    # You must call self.init_components() before doing anything else in this\
    \ function\n    self.init_components(**properties)\n    counter = Module1.get_count()\n\
    \    print counter\n    \n    # When the form loads, immediately run the timer\
    \ \n    # tick event handler to update the plot\n    self.update_question_tick()\n\
    \    self.update_timer_tick()\n\n    # Any code you write here will run when the\
    \ form opens.\n    questions = Module1.results() # anvil.server.call_s('get_results')\n\
    \    print \"First question: %s\" % questions[counter]['question']\n    self.viewQuestion.text\
    \ = questions[counter]['question']\n    self.rb1.text = questions[counter]['Choice1']\n\
    \    self.rb2.text = questions[counter]['Choice2']\n\n  def rb1_clicked (self,\
    \ **event_args):\n    # This method is called when this radio button is selected\n\
    \    questions = questions = Module1.results()\n    counter = Module1.get_count()\n\
    \    for c in range(0, 13):\n      if counter == c:\n        print c\n       \
    \ Module1.update_data(c, 0)\n    \n    self.rb1.visible = False\n    self.rb2.visible\
    \ = False\n    self.notification.visible = True\n    self.notification.text =\
    \ \"You have chosen \" + questions[counter]['Choice1']\n    \n  def rb2_clicked\
    \ (self, **event_args):\n    # This method is called when this radio button is\
    \ selected\n    questions = questions = Module1.results()\n    counter = Module1.get_count()\n\
    \    \n    for c in range(0, 13):\n      if counter == c:\n        print c\n \
    \       Module1.update_data(c, 1)\n    \n    self.rb1.visible = False\n    self.rb2.visible\
    \ = False\n    self.notification.visible = True\n    self.notification.text =\
    \ \"You have chosen \" + questions[counter]['Choice2']  \n  \n  def update_timer_tick\
    \ (self, **event_args):\n    # This method is called Every [interval] seconds\n\
    \    results = Module1.results()\n    counter = Module1.get_count()\n    length\
    \ = len(results)\n    if counter == length:\n      return\n    \n    # Create\
    \ a Plotly Bar chart with colours along the x-axis\n    # and number of votes\
    \ on the y-axis.\n    trace0 = go.Bar(\n      x=[results[counter]['Choice1'],\
    \ results[counter]['Choice2']],\n      y=[results[counter]['Choice1_Value'], results[counter]['Choice2_Value']],\n\
    \      width=0.75,\n      marker=dict(\n        color=['rgb(51, 204, 255', 'rgb(51,\
    \ 204, 51)']),\n    )\n    \n    self.results_plot.data = [trace0]\n    layout\
    \ = go.Layout(\n      title='Votes',\n    )\n    \n    '''\n    trace1 = go.Bar(\n\
    \      x=[results[counter]['Choice1'], results[counter]['Choice2']],\n      y=[results[counter]['Choice1_Value']],\n\
    \      # orientation = 'h',\n      name='Choice 1',\n      width=0.5,\n      marker=dict(\n\
    \        color='rgb(51, 204, 255)'\n      )\n    )\n    \n    trace2 = go.Bar(\n\
    \      x=[results[counter]['Choice1'], results[counter]['Choice2']],\n      y=[results[counter]['Choice2_Value']],\n\
    \      # orientation = 'h',\n      name='Choice 2',\n      width=0.5,\n      marker=dict(\n\
    \        color='rgb(51, 204, 51)'\n      )\n    ) \n    self.results_plot.data\
    \ = [trace2, trace1]\n    \n    # Set the axis and plot labels\n    self.results_plot.layout\
    \ = go.Layout(\n      yaxis=go.YAxis(\n        #title=\"Votes\",\n        # Start\
    \ y-axis ticks at 0 and increment by 1.\n        tick0=0,\n        dtick=1\n \
    \     ),\n      xaxis=go.YAxis(\n        title=\"Choices Made\",\n        dtick=2\n\
    \      )\n    ) '''\n\n  \n  def nextQuestion_clicked(self):\n    click = Module1.get_click()\n\
    \    #click = anvil.server.call_s('get_click')\n    if click == False:\n     \
    \ return\n    elif click == True:\n      questions = Module1.results()\n     \
    \ # Module1.increase_count()\n      # counter = anvil.server.call_s('get_counter')\n\
    \      counter = Module1.get_count()\n      length = len(questions)\n      if\
    \ counter >= length:\n        self.viewQuestion.text = \"The audience has made\
    \ their choice\"\n        self.rb1.visible = False\n        self.rb2.visible =\
    \ False\n        return\n    \n      self.rb1.text = questions[counter]['Choice1']\n\
    \      self.rb2.text = questions[counter]['Choice2']\n    \n      self.notification.text\
    \ = \"\"\n      self.rb1.visible = True\n      self.rb1.selected = False\n   \
    \   self.rb2.visible = True\n      self.rb2.selected = False\n    \n      self.viewQuestion.text\
    \ = questions[counter]['question']\n      if counter < length:\n        self.viewQuestion.text\
    \ = questions[counter]['question']\n        print \"Current question: %s\" % questions[counter]['question']\n\
    \      else:\n        return\n      Module1.set_click()\n      #anvil.server.call_s('set_click')\n\
    \n  def update_question_tick (self, **event_args):\n    self.nextQuestion_clicked()\n\
    \n\n\n\n\n  \n\n\n\n\n    \n  \n"
  class_name: Form1
  container:
    type: ColumnPanel
    properties: {width: default, border: '', foreground: '#FFF', visible: true, row_spacing: 10,
      wrap_on: mobile, spacing_above: small, col_widths: '{}', spacing_below: small,
      background: '#000'}
  components:
  - type: Label
    properties: {role: null, width: default, align: center, border: '', foreground: '',
      visible: true, text: Immersion of Choice, font_size: 23, font: Verdana, spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: true,
      underline: false, icon: ''}
    name: Title
    layout_properties: {grid_position: 'AJOXNY,CAWQNY'}
  - type: Label
    properties: {width: default, align: center, border: '', foreground: '', visible: true,
      text: 'What''s the question?

        ', font_size: 25, font: '', spacing_above: small, icon_align: left, spacing_below: small,
      italic: false, background: '', bold: false, underline: false, icon: ''}
    name: viewQuestion
    layout_properties: {grid_position: 'GNTVXP,GHLSJX'}
  - type: RadioButton
    properties: {role: null, selected: false, width: default, align: center, border: '',
      enabled: true, foreground: '', value: '0', visible: true, text: Choice 1, font_size: 23,
      font: '', spacing_above: none, spacing_below: small, italic: false, background: '',
      bold: false, group_name: mygroup, underline: false}
    name: rb1
    layout_properties: {grid_position: 'DHZUBY,NLBBDO'}
    event_bindings: {clicked: rb1_clicked, hide: rb1_hide}
  - type: RadioButton
    properties: {role: null, selected: false, width: default, align: center, border: '',
      enabled: true, foreground: '', value: '0', visible: true, text: Choice 2, font_size: 23,
      font: '', spacing_above: none, spacing_below: small, italic: false, background: '',
      bold: false, group_name: mygroup, underline: false}
    name: rb2
    layout_properties: {grid_position: 'EKSTYI,ZLTJXW'}
    event_bindings: {clicked: rb2_clicked}
  - type: Label
    properties: {width: default, align: center, border: '', foreground: '', visible: true,
      text: '', font_size: 20, font: '', spacing_above: small, icon_align: left, spacing_below: small,
      italic: false, background: '', bold: false, underline: false, icon: ''}
    name: notification
    layout_properties: {grid_position: 'UGBEMY,EWDWGT'}
  - type: Plot
    properties: {width: default, spacing_above: small, spacing_below: small, height: '345',
      visible: true, interactive: true}
    name: results_plot
    layout_properties: {grid_position: 'EZLVZM,FTIPGV', full_width_row: false, row_background: ''}
  - type: Label
    properties: {role: null, width: default, align: left, border: '', foreground: '',
      visible: true, text: '*If an error message has occurred, refresh this page',
      font_size: 20, font: '', spacing_above: small, icon_align: left, spacing_below: small,
      italic: false, background: '', bold: false, underline: false, icon: ''}
    name: label_1
    layout_properties: {grid_position: 'RVAGAL,HDKSDO'}
  - type: Spacer
    properties: {height: 32}
    name: spacer_1
    layout_properties: {grid_position: 'LKSZSH,OKOUTB'}
  - type: Spacer
    properties: {height: 32}
    name: spacer_3
    layout_properties: {grid_position: 'RFIHAE,RAHXRB'}
  - type: Link
    properties: {role: null, width: default, url: 'https://ctngai7.wixsite.com/thetransitionproject/courtney-ngai-1',
      align: right, border: '', foreground: '#00FA9A', visible: true, text: About the Artist,
      font_size: 20, row_spacing: 10, wrap_on: mobile, font: '', spacing_above: small,
      icon_align: left, col_widths: '', spacing_below: small, italic: false, background: '',
      bold: true, underline: true, icon: ''}
    name: link_1
    layout_properties: {grid_position: 'RFIHAE,ABZMZQ'}
  - type: Timer
    properties: {interval: 2}
    name: update_timer
    event_bindings: {tick: update_timer_tick}
  - name: update_question
    type: Timer
    properties: {interval: 2}
    event_bindings: {tick: update_question_tick}
package_name: ChoicesPoll
name: Choices Poll
runtime_options: {server_version: python2-sandbox}
startup_form: Form1
dependency_code: {}
theme:
  templates:
  - name: Standard Page
    description: ''
    img: null
    form:
      class_name: Form
      container:
        type: HtmlTemplate
        properties: {html: '@theme:standard-page.html'}
      components:
      - type: ColumnPanel
        properties: {}
        name: content_panel
        layout_properties: {slot: default}
      code: "from anvil import *\n\nclass $NAME$($NAME$Template):\n\n  def __init__(self,\
        \ **properties):\n    # You must call self.init_components() before doing\
        \ anything else in this function\n    self.init_components(**properties)\n\
        \n    # Any code you write here will run when the form opens.\n    \n"
  parameters:
    roles: []
  assets:
  - {name: theme.css, content: QGltcG9ydCAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVBhY2lmaWNvfE11a3R1K01hbGFyJzsNCg0KLypib2R5IHsNCgltYXJnaW46IDA7DQp9Ki8NCg0KYSwgYTp2aXNpdGVkIHsNCiAgY29sb3I6ICNhOTQ0NDINCn0NCg0KYTpob3ZlciwgYTpmb2N1cywgYTphY3RpdmUgew0KICBjb2xvcjogI2Q5NTM0ZjsNCn0NCg0KLm5hdiB7DQogIHBhZGRpbmctbGVmdDogMjBweDsNCiAgcGFkZGluZy1yaWdodDogMjBweDsNCiAgZm9udC1mYW1pbHk6ICJNdWt0dSBNYWxhciIsICJIZWx2ZXRpY2EgTmV1ZSIsICJIZWx2ZXRpY2EiLCBzYW5zLXNlcmlmOw0KfQ0KDQoubmF2LmRhcmsgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzE3OThjOw0KICBjb2xvcjogd2hpdGU7DQp9DQoNCi5uYXYuZGFyayBhLCAubmF2LmRhcmsgYTp2aXNpdGVkIHsNCiAgY29sb3I6IHdoaXRlOw0KfQ0KDQoubmF2LmRhcmsgYTpob3ZlciwgLm5hdi5kYXJrIGE6YWN0aXZlLCAubmF2LmRhcmsgYTpmb2N1cyB7DQogIGNvbG9yOiAjZWVlOw0KfQ0KDQoNCi5uYXYgLnRpdGxlIHsNCiAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KfQ0KDQouZGVzaWduZXIgLm5hdi1yaWdodCB7DQogIGZsb2F0OiByaWdodDsNCn0NCg0KLmRlc2lnbmVyIC5uYXYtZWx0IHsNCiAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KICB2ZXJ0aWNhbC1hbGlnbjogdG9wOw0KICBtYXJnaW4tbGVmdDogMTVweDsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KDQpAbWVkaWEobWluLXdpZHRoOjc2OHB4KSB7DQogIC5uYXYtcmlnaHQgew0KICAgIGZsb2F0OiByaWdodDsNCiAgfQ0KDQogIC5uYXYtZWx0IHsNCiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCiAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7DQogICAgICBtYXJnaW4tbGVmdDogMTVweDsNCiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgfQ0KfQ0KDQoubmF2IC5wbGFjZWhvbGRlciB7DQogIHBhZGRpbmc6IDdweCAxMHB4Ow0KICBtYXJnaW46IDNweCAwOw0KICBjb2xvcjogIzg4ODsNCiAgYm9yZGVyOiAycHggZGFzaGVkOw0KfQ0KDQoubmF2LmRhcmsgLnBsYWNlaG9sZGVyIHsNCiAgY29sb3I6ICNjY2M7DQp9DQoNCi5uYXYgLnBsYWNlaG9sZGVyIHsNCgl2aXNpYmlsaXR5OiBoaWRkZW47DQp9DQoNCmJvZHkuYW52aWwtaGlnaGxpZ2h0IC5uYXYgLnBsYWNlaG9sZGVyIHsNCgl2aXNpYmlsaXR5OiB2aXNpYmxlOw0KfQ0KDQoubmF2LWVsdCAuZHJvcC1oZXJlIHsNCglwb3NpdGlvbjogYWJzb2x1dGU7DQoJdG9wOiAwOw0KCWxlZnQ6IC0xMHB4Ow0KCWJvdHRvbTogMDsNCgl3aWR0aDogNXB4Ow0KfQ0KDQouaGVhZGVyIHsNCglwYWRkaW5nOiAxMHB4IDEwMHB4IDMwcHg7DQogICAgcGFkZGluZy1sZWZ0OiAxMCU7DQoJcGFkZGluZy1yaWdodDogMTAlOw0KCW1pbi1oZWlnaHQ6IDEyMHB4Ow0KCWJhY2tncm91bmQ6IHVybChfL3RoZW1lL2hlYWRlci5qcGcpIGNlbnRlci9jb3ZlcjsNCglmb250LWZhbWlseTogJ1BhY2lmaWNvJywgY3Vyc2l2ZTsNCgljb2xvcjogd2hpdGU7DQoJZm9udC1zaXplOiA4MHB4Ow0KICAgIC8qbGluZS1oZWlnaHQ6IDEuMjsqLw0KfQ0KDQouaGVhZGVyIC5wbGFjZWhvbGRlciB7DQogIGJvcmRlcjogMnB4IGRhc2hlZCAjZGRkOw0KICBjb2xvcjogI2RkZDsNCiAgcGFkZGluZzogMjBweDsNCn0NCg0KLmNhcmQgew0KCW1hcmdpbjogNTBweCAxMHB4IDUwcHg7DQoJYmFja2dyb3VuZDogd2hpdGU7DQoJcGFkZGluZzogMzBweDsNCgljb2xvcjogIzQ0NDsNCgltYXgtd2lkdGg6IDY4MHB4Ow0KfQ0KDQouY2FyZCAucGxhY2Vob2xkZXIgew0KICBib3JkZXI6IDJweCBkYXNoZWQgIzg4ODsNCiAgcGFkZGluZzogMjBweDsNCiAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KDQouYm9keSB7DQogIG1hcmdpbi1sZWZ0OiA1cHg7DQogIG1hcmdpbi1yaWdodDogNXB4Ow0KfQ0KDQpAbWVkaWEobWluLXdpZHRoOjcwMHB4KSB7DQoJLmNhcmQgew0KCQltYXJnaW4tbGVmdDogYXV0bzsNCgkJbWFyZ2luLXJpZ2h0OiBhdXRvOw0KCQltYXgtd2lkdGg6IDY4MHB4Ow0KCX0NCn0NCg==}
  - {name: standard-page.html, content: PGRpdiBhbnZpbC1zbG90LXJlcGVhdD0iZGVmYXVsdCI+DQo8L2Rpdj4NCg0KPGNlbnRlciBzdHlsZT0iY29sb3I6Izg4ODsgbWFyZ2luOiA1MHB4OyI+DQogIDxpPlRoaXMgaXMgYSBwbGFjZWhvbGRlciBmb3IgeW91ciBhcHAncyBjdXN0b20gSFRNTC4gRWRpdCBpdCBieSBjaGFuZ2luZyB0aGUgdGhlbWUgYXNzZXRzLjwvaT4NCjwvY2VudGVyPg0K}
server_modules:
- {name: ServerModule1, code: "import tables\nfrom tables import app_tables\nimport\
    \ anvil.server\n\n# This is a server module. It runs on the Anvil server,\n# rather\
    \ than in the user's browser.\n#\n# To allow anvil.server.call() to call functions\
    \ here, we mark\n# them with @anvil.server.callable.\n# Here is an example - you\
    \ can replace it with your own:\n#\n# Put this code in a new Server Module:\n\
    @anvil.server.callable\ndef get_results():\n  return list(app_tables.questions.search())\n\
    \  \n@anvil.server.callable\ndef get_counter():\n  count = list(app_tables.count.search())\n\
    \  return count[0]['counter']\n\n@anvil.server.callable\ndef update_count():\n\
    \  row = list(app_tables.count.search())\n  row[0]['counter'] += 1\n\n@anvil.server.callable\n\
    def get_click():\n  row = list(app_tables.count.search())\n  return row[0]['next_clicked']\n\
    \n@anvil.server.callable\ndef set_click():\n  row = list(app_tables.count.search())\n\
    \  row[0]['next_clicked'] = False"}
renamed: true
